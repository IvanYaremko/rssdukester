// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: saved_posts.sql

package database

import (
	"context"
	"time"
)

const getSavedPosts = `-- name: GetSavedPosts :many
SELECT id, title, url, feed, created_at FROM saved_posts ORDER BY created_at DESC
`

func (q *Queries) GetSavedPosts(ctx context.Context) ([]SavedPost, error) {
	rows, err := q.db.QueryContext(ctx, getSavedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SavedPost
	for rows.Next() {
		var i SavedPost
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Feed,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const savePost = `-- name: SavePost :exec
INSERT INTO saved_posts (
id,
title,
url,
feed,
created_at
) VALUES (
?,
?,
?,
?,
?
)
`

type SavePostParams struct {
	ID        int64
	Title     string
	Url       string
	Feed      string
	CreatedAt time.Time
}

func (q *Queries) SavePost(ctx context.Context, arg SavePostParams) error {
	_, err := q.db.ExecContext(ctx, savePost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.Feed,
		arg.CreatedAt,
	)
	return err
}
