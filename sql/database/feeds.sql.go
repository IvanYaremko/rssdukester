// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"time"
)

const createFeed = `-- name: CreateFeed :exec
INSERT INTO feeds (
    name,
    url,
    created_at,
    updated_at
) VALUES (
    ?,
    ?,
    ?,
    ?
) RETURNING id, name, url, created_at, updated_at
`

type CreateFeedParams struct {
	Name      string
	Url       string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) error {
	_, err := q.db.ExecContext(ctx, createFeed,
		arg.Name,
		arg.Url,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getFeedById = `-- name: GetFeedById :one
SELECT id, name, url, created_at, updated_at FROM feeds WHERE id = ?
`

func (q *Queries) GetFeedById(ctx context.Context, id int64) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedById, id)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, name, url, created_at, updated_at FROM feeds WHERE url = ?
`

func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
